#!/bin/bash
#
# wpbuildr by Aaron Holbrook (@aaronjholbrook)
# 
# This script was created to cut down on the amount of time it takes
# to get a local install of WordPress up and running by automating the
# things we do over and over: download WordPress, create a database, run the
# install, download our favorite plugins, etc, etc.
#
# Additionally, this script is meant to help with multi-environment deployment
# using Aaron Holbrook's WordPress/Git deployment model (http://aaronjholbrook.com/wpvc/)
#
# version: 1.2


clear
echo ""
echo '   '
echo '                    __          _ __    __    '
echo '    _      ______  / /_  __  __(_) /___/ /____'
echo '   | | /| / / __ \/ __ \/ / / / / / __  / ___/'
echo '   | |/ |/ / /_/ / /_/ / /_/ / / / /_/ / /    '
echo '   |__/|__/ .___/_.___/\__,_/_/_/\__,_/_/     '
echo '         /_/                                  '
echo '   '
echo "wpbuildr - an Aaron Holbrook Production"
echo "modified by Jason Resnick for rezzz deployment"
echo ''

# create the html for site-root (to mimic MT, possibly look at allowing other structures)
# if html dir exists, exit - let's not break anything!
# if [ -d "html" ]; then
#   echo "Oops, looks like you already have an html directory here! To protect your files, WP Buildr will now quit. If you meant to run it here, just rename/remove your existing html folder, and it will run."
#   echo "exiting..."
#   exit
# fi


# See if the user wants to use Git
#read -p "Would you like to use Git? [Y/n] " git




# Set path of script for our library files
dir="$(dirname "$(readlink "$0")")"

# Title the project
# Use the title for:
# DB Name
# theme name
# table prefixes
if [ ! $1 ]; then
  read -p "Give your project a name: " project
else
  project=$1
fi

mkdir $project
cd $project

# Set path of the project
project_dir=`pwd`

# echo $project_dir; exit;


# How are we versioning this project? The whole thing, or just the wp-content/
read -p "Should I version the whole project (including WP Core)? [Y/n] " versioning

# Let's set up the username and password for the database - not to use root:root for local
ran=$[ ( $RANDOM % 100 )  + 1 ]
dbname=${project//[-._]/}
dbuser=u_$dbname
dbpass=$project$ran

# Because MySQL doesn't like long usernames
LEN=${#dbuser}
if [ $LEN -gt 15 ]; then
    dbuser=${dbuser:0:15}
fi
# See if there's a config file, if not offer to create one based on the options the 
# user chooses during the setup
# if [ ! -e "$dir/conf/config.conf" ]; then
#   read -p 'Would you like to save your config for next time? [Y/n]' response
#   if [[ $response =~ ^([nN][oO]|[nN])$ ]]
#     then
#         config="NO"
#     else
#         config='YES'
#         declare -a config_values
#         touch $dir/config.conf
#   fi
#   # Cool there's already a config file, so let's use those defaults!
#   else
#     echo "Detected a config file, using those defaults."
# fi

# Build our theme from a framework? 
if [ ! $2 ]; then
  echo "What theme framework would you like to use?"
  read -p "Options: [blueox, _s, startbox, starkers, html5, bones, custom, none]: " framework
fi


# Create html directory (todo: customizable structure)
# mkdir $project_dir; cd $project_dir

if [ "$versioning" == "Y" ]; then
  # Init git repo and do an empty initial commit (for rebasing, thanks @evansolomon)
  git init -q
  git commit --allow-empty -q -m "Initial empty commit"
fi

echo ''
echo '------------------------------------------------------------------------'
echo '---> DOWNLOADING WORDPRESS'
echo '------------------------------------------------------------------------'
echo ''


if [ "$versioning" == "Y" ]; then
  # set .gitignore to ignore wp-config.local so we can set different database variables for development vs production
  cat "$dir/lib/.gitignore_core" > .gitignore
fi


# download wordpress, extract and delete original tar
curl -H "Accept-Encoding: gzip,deflate" http://wordpress.org/latest.tar.gz > latest.tar.gz
tar --strip-components=1 -zxf latest.tar.gz
rm latest.tar.gz
rm license.txt
rm readme.html


echo ''
echo '------------------------------------------------------------------------'
echo '---> WORDPRESS DOWNLOADED'
echo '------------------------------------------------------------------------'
echo ''


if [ "$versioning" == "Y" ]; then
  # We succesfully added WordPress, so let's commit!
  git add .
  git commit -q -m "Installed WordPress core files."
fi

# Use framework option
if [ "$framework" == "none" ] || [ "$framework" == "" ]; then
  framework_repo="none"
elif [ "$framework" == "blueox" ]; then
  framework_repo="git://github.com/AaronHolbrook/blueox.git"  
elif [ "$framework" == "_s" ]; then
  framework_repo="git://github.com/Automattic/_s.git"
elif [ "$framework" == "starkers" ]; then
  framework_repo="git://github.com/viewportindustries/starkers.git"
elif [ "$framework" == "html5" ]; then
  framework_repo="git://github.com/murtaugh/HTML5-Reset-Wordpress-Theme.git"  
elif [ "$framework" == "startbox" ]; then
  framework_repo="git://github.com/WebDevStudios/StartBox.git"  
elif [ "$framework" == "bones" ]; then
  framework_repo="git://github.com/eddiemachado/bones.git"
elif [ "$framework" == "roots" ]; then
  framework_repo="git://github.com/retlehs/roots.git"
elif [ "$framework" == "custom" ]; then
  read -p "Location for custom theme: [can be git:// protocol or just a local git repository]: " framework_repo
fi


  
echo '------------------------------------------------------------------------'
echo '---> DOWNLOADING THEME'
echo '------------------------------------------------------------------------'
echo ''


# if the user did not choose none, then add the theme to our themes folder
if [ "$framework_repo" != "none" ]; then
  # clone the repo into our new base directory
  git clone -q "$framework_repo" "wp-content/themes/$project"

  # delete the git repo that the theme came with
  rm -rf wp-content/themes/$project/.git

  # let's clear out some of the pre-packaged themes
  rm -rf wp-content/themes/twentyten
  rm -rf wp-content/themes/twentyeleven
  # rm -rf wp-content/themes/twentytwelve 
  # Let's leave twentytwelve in case our theme blows up we can always remove it later
fi


echo '------------------------------------------------------------------------'
echo '---> THEME INSTALLED'
echo '------------------------------------------------------------------------'
echo ''

if [ "$versioning" == "Y" ]; then
  # Cool - we added our theme, let's commit!
  git add .
  git commit -q -am "Theme framework installed!"
elif [ "$versioning" == "n" ]; then
  cd $project_dir/wp-content/
  cat "$dir/lib/.gitignore" > .gitignore
  git init -q
  git add .
  git commit -q -am "Initial Commit"
  cd ..
fi

# Clean out packaged plugins (akismet & hello dolly)
cd $project_dir/wp-content/plugins
rm -rf akismet
rm hello.php


# Install plugins that are listed in the plugins.conf file
# To add your/modify the plugins that are installed simply
# Change the plugins file to contain the slug of the plugins you want! 
for plugin in `cat $dir/conf/plugins.conf`; do
  echo "Installing: $plugin..."
  mkdir $plugin; cd $plugin
  curl -H "Accept-Encoding: gzip,deflate" http://downloads.wordpress.org/plugin/$plugin.zip > $plugin.zip
  tar --strip-components=1 -zxf $plugin.zip
  rm $plugin.zip
  cd ..
done


cd ..
mkdir uploads
chmod -R 755 uploads
#sudo chown _www uploads

# mu-plugins?
read -p "Does the project need the mu-plugins [Y/n] " muplugins
if [ "$muplugins" == "Y" ]; then
  # Let's add some mu-plugins!
  mkdir mu-plugins
  cd mu-plugins
  echo "<?php // mu-plugins/load.php" > load.php;

  # Install plugins that are listed in the mu-plugins.conf file
  # To add your/modify the plugins that are installed simply
  # Change the plugins file to contain the slug of the plugins you want! 
  for plugin in `cat $dir/conf/mu-plugins.conf`; do
    echo "Installing: $plugin..."
    mkdir $plugin; cd $plugin
    curl -H "Accept-Encoding: gzip,deflate" http://downloads.wordpress.org/plugin/$plugin.zip > $plugin.zip
    tar --strip-components=1 -zxf $plugin.zip
    rm $plugin.zip

    # Create a loader for the plugin (mu-plugins does not look in subdirectories)
    cd ..
    echo "require WPMU_PLUGIN_DIR . '/$plugin/$plugin.php';" >> load.php
  done
fi

if [ "$versioning" == "Y" ]; then
  # cool, plugins are installed, let's commit!
  git add .
  git commit -q -am "Plugins installed!"
elif [ "$versioning" == "n" ]; then
  # cool, plugins are installed, let's commit!
  git add .
  git commit -q -am "Plugins installed!"
fi


echo ''
echo '------------------------------------------------------------------------'
echo '---> PLUGINS INSTALLED'
echo '------------------------------------------------------------------------'
echo ''


cd $project_dir/
echo "<?php
/**
 * The base configurations of the WordPress.
 *
 * This file has the following configurations: MySQL settings, Table Prefix,
 * Secret Keys, WordPress Language, and ABSPATH. You can find more information
 * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing
 * wp-config.php} Codex page. You can get the MySQL settings from your web host.
 *
 * This file is used by the wp-config.php creation script during the
 * installation. You don't have to use the web site, you can just copy this file
 * to \"wp-config.php\" and fill in the values.
 *
 * @package WordPress
 */
// For local development - make sure to add wp-config.local.php to your .gitignore file - this file should NOT be on the production server
if ( file_exists( dirname( __FILE__ ) . '/wp-config.local.php' ) ) {
  include( dirname( __FILE__ ) . '/wp-config.local.php' );
  define( 'WP_LOCAL_DEV', true ); 
} 
else {

  // ** MySQL settings - You can get this info from your web host ** //
  /** The name of the database for WordPress */
  define('DB_NAME', '${dbname}');

  /** MySQL database username */
  define('DB_USER', '${dbuser}');

  /** MySQL database password */
  define('DB_PASSWORD', '${dbpass}');

  /** MySQL hostname */
  define('DB_HOST', 'localhost');
  
  define('WP_CACHE', true);


  /**
   * For developers: WordPress debugging mode.
   *
   * Change this to true to enable the display of notices during development.
   * It is strongly recommended that plugin and theme developers use WP_DEBUG
   * in their development environments.
   */
  define('WP_DEBUG', false);

  define('SAVEQUERIES', true);

  /**
   * WordPress Database Table prefix.
   *
   * You can have multiple installations in one database if you give each a unique
   * prefix. Only numbers, letters, and underscores please!
   */
  \$table_prefix  = '${dbname}_'; 

}


/** Database Charset to use in creating database tables. */
define('DB_CHARSET', 'utf8');

/** The Database Collate type. Don't change this if in doubt. */
define('DB_COLLATE', '');

/**#@-*/

/**#@+
 * Authentication Unique Keys and Salts.
 *
 * Change these to different unique phrases!
 * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
 *
 * @since 2.6.0
 */

 " > wp-config.php

curl -s https://api.wordpress.org/secret-key/1.1/salt/ >> wp-config.php;

echo "

/**
 * WordPress Localized Language, defaults to English.
 *
 * Change this to localize WordPress. A corresponding MO file for the chosen
 * language must be installed to wp-content/languages. For example, install
 * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German
 * language support.
 */
define('WPLANG', '');

/* That's all, stop editing! Happy blogging. */

/** Absolute path to the WordPress directory. */
if ( !defined('ABSPATH') )
  define('ABSPATH', dirname(__FILE__) . '/');

/** Sets up WordPress vars and included files. */
require_once(ABSPATH . 'wp-settings.php');" >> wp-config.php

# All done with wp-config.php so let's remove that wp-config-sample.php file
rm wp-config-sample.php


# define wp-config.local
echo "<?php
define('DB_NAME', '${dbname}');
/** MySQL database username */
define('DB_USER', '${dbuser}');
/** MySQL database password */
define('DB_PASSWORD', '${dbpass}');
/** MySQL hostname */
define('DB_HOST', 'localhost');

// Open your eyes!
define('WP_DEBUG', true);

// Save queries
define('SAVEQUERIES', true);

\$table_prefix  = '${dbname}_';" > wp-config.local.php

if [ "$versioning" == "Y" ]; then
  # cool, wp-config(s) has been created, let's commit!
  git add .
  git commit -q -am "Created wp-config & wp-config.local."
fi

echo '------------------------------------------------------------------------'
echo '---> WP-CONFIG & WP-CONFIG.LOCAL CREATED'
echo '------------------------------------------------------------------------'
echo ''

# Check for MAMP first, if installed use that, otherwise use built-in MySQL
mamp=yes
command -v /Applications/MAMP/Library/bin/mysql >/dev/null 2>&1 || {
  mamp=no
}
CMD="CREATE DATABASE $dbname; CREATE USER '$dbuser'@'localhost' IDENTIFIED BY '$dbpass'; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, EXECUTE, INDEX on $dbname.* TO '$dbuser'@'localhost';"
if [ "$mamp" == 'yes' ]; then
  # create local database using MAMP's MySQL
  /Applications/MAMP/Library/bin/mysql -uroot -proot -e "$CMD"
else
  # create local database using whatever MySQL the user is using
  mysql -uroot -proot -e "$CMD"
fi

echo ''
echo '------------------------------------------------------------------------'
echo '---> DATABASE CREATED'
echo '------------------------------------------------------------------------'
echo ''


echo ""
echo '   '
echo '                    __          _ __    __    '
echo '    _      ______  / /_  __  __(_) /___/ /____'
echo '   | | /| / / __ \/ __ \/ / / / / / __  / ___/'
echo '   | |/ |/ / /_/ / /_/ / /_/ / / / /_/ / /    '
echo '   |__/|__/ .___/_.___/\__,_/_/_/\__,_/_/     '
echo '         /_/                                  '
echo '   '
echo "Thanks for using wpbuildr by @aaronjholbrook"
echo "and modded by @rezzz"


echo ''
echo '------------------------------------------------------------------------'
echo '---> WPBUILDR COMPLETE'
echo '------------------------------------------------------------------------'
echo ''


